const express = require('express');
const router = express.Router();
const productController = require('../Controllers/ProductControllers');
const materialCtrl = require('../Controllers/MaterialProductControllers');

// üí° IMPORT middleware Multer ƒë√£ ƒë∆∞·ª£c export t·ª´ Controller
const { uploadAny, uploadSingleImage } = materialCtrl; 

// ==========================
// PRODUCT ROUTES
// ==========================

// 1. ROUTE CH√çNH: T·∫°o m·ªõi s·∫£n ph·∫©m ho·∫∑c th√™m bi·∫øn th·ªÉ
router.post('/createOrUpdateProduct', uploadAny, materialCtrl.createOrUpdateProduct);

// 2. API KI·ªÇM TRA ID (D√πng cho Frontend)
router.get('/check/:productId', materialCtrl.checkProductExistence);

// 3. L·∫•y danh s√°ch t·∫•t c·∫£ s·∫£n ph·∫©m
router.get('/', productController.getAllProduct);

// 4. L·∫•y danh s√°ch categories
router.get('/categories', productController.getAllCategories);

// 5. L·∫•y t·∫•t c·∫£ slug c·ªßa categories
router.get('/slugs', productController.getAllCategorySlugs);


// --- C√ÅC ROUTE C·ª§ TH·ªÇ (SLUG) ---

// 6. L·∫•y s·∫£n ph·∫©m theo slug (Product Detail)
router.get('/slug/:slug', productController.getProductBySlug);

// 7. L·∫•y s·∫£n ph·∫©m theo categogy slug (ƒê√É S·ª¨A L·ªñI CH√çNH T·∫¢)
router.get('/categogy/slug/:slug', productController.getProductsByCategorySlug);


// --- C√ÅC ROUTE CHUNG CHUNG (ID) ---

// 8. C·∫≠p nh·∫≠t s·∫£n ph·∫©m (PUT)
router.put('/:id', uploadSingleImage, productController.updateProduct);

// 9. X√≥a s·∫£n ph·∫©m (DELETE)
router.delete('/:id', productController.deleteProduct);

// 10. L·∫•y s·∫£n ph·∫©m theo ID (GET)
router.get('/:id', productController.getProductById);


module.exports = router;