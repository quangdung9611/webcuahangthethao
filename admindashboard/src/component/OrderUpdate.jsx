// üìÑ src/pages/OrderUpdate.jsx
import React, { useEffect, useState } from "react";
import { useParams, useNavigate } from "react-router-dom";
import axios from "axios";
import "../CSS/productupdate.css";

const OrderUpdate = () => {
  const { id } = useParams();
  const navigate = useNavigate();

  const [order, setOrder] = useState(null);
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);

  // üßæ L·∫•y d·ªØ li·ªáu ƒë∆°n h√†ng ban ƒë·∫ßu
  useEffect(() => {
    const fetchOrder = async () => {
      try {
        const res = await axios.get(`http://localhost:5000/api/orders/${id}`);
        setOrder(res.data);
      } catch (err) {
        console.error("L·ªói khi l·∫•y ƒë∆°n h√†ng:", err);
      } finally {
        setLoading(false);
      }
    };
    fetchOrder();
  }, [id]);

  // üìù X·ª≠ l√Ω thay ƒë·ªïi input
  const handleReceiverChange = (e) => {
    const { name, value } = e.target;
    setOrder({
      ...order,
      receiver: { ...order.receiver, [name]: value },
    });
  };

  const handleOrderChange = (e) => {
    const { name, value } = e.target;
    setOrder({
      ...order,
      [name]: value,
    });
  };

  // üìù X·ª≠ l√Ω thay ƒë·ªïi s·∫£n ph·∫©m trong ƒë∆°n h√†ng
  const handleItemChange = (index, field, value) => {
    const updatedItems = [...order.items];
    updatedItems[index][field] = value;

    // ‚úÖ T√≠nh l·∫°i subtotal
    updatedItems[index].subtotal =
      (Number(updatedItems[index].price) - Number(updatedItems[index].discount_amount)) *
      Number(updatedItems[index].quantity);

    setOrder({
      ...order,
      items: updatedItems,
    });
  };

  // üìå G·ª≠i PUT c·∫≠p nh·∫≠t ƒë∆°n h√†ng
  const handleUpdate = async () => {
    setSaving(true);
    try {
      const payload = {
        receiver: order.receiver,
        status: order.status,
        total_amount: order.total_amount,
        final_amount: order.final_amount,
        items: order.items,
      };

      await axios.put(`http://localhost:5000/api/orders/${id}`, payload);
      alert("‚úÖ C·∫≠p nh·∫≠t ƒë∆°n h√†ng th√†nh c√¥ng!");
      navigate("/order");
    } catch (err) {
      console.error("L·ªói khi c·∫≠p nh·∫≠t ƒë∆°n h√†ng:", err);
      alert("‚ùå C·∫≠p nh·∫≠t th·∫•t b·∫°i!");
    } finally {
      setSaving(false);
    }
  };

  if (loading) return <p>ƒêang t·∫£i ƒë∆°n h√†ng...</p>;
  if (!order) return <p>Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng!</p>;

  return (
    <div className="update-form-container">
      <h2>C·∫≠p nh·∫≠t ƒê∆°n H√†ng #{order.order_id}</h2>

      <form onSubmit={(e) => e.preventDefault()}>
        {/* üßç Th√¥ng tin ng∆∞·ªùi nh·∫≠n */}
        <div className="form-section">
          <label>Ng∆∞·ªùi nh·∫≠n:</label>
          <input
            type="text"
            name="name"
            value={order.receiver.name}
            onChange={handleReceiverChange}
          />

          <label>SƒêT:</label>
          <input
            type="text"
            name="phone"
            value={order.receiver.phone}
            onChange={handleReceiverChange}
          />

          <label>ƒê·ªãa ch·ªâ:</label>
          <input
            type="text"
            name="address"
            value={order.receiver.address}
            onChange={handleReceiverChange}
          />
        </div>

        {/* üí∞ T·ªïng ti·ªÅn v√† tr·∫°ng th√°i */}
        <div className="form-section">
          <label>T·ªïng ti·ªÅn:</label>
          <input
            type="number"
            name="total_amount"
            value={order.total_amount}
            onChange={handleOrderChange}
          />

          <label>Th√†nh ti·ªÅn sau gi·∫£m:</label>
          <input
            type="number"
            name="final_amount"
            value={order.final_amount}
            onChange={handleOrderChange}
          />

          <label>Tr·∫°ng th√°i ƒë∆°n h√†ng:</label>
          <select
  name="status"
  value={order.status}
  onChange={handleOrderChange}
>
  {[
    { value: "pending", label: "Ch·ªù x√°c nh·∫≠n" },
    { value: "paid", label: "ƒê√£ thanh to√°n" },
    { value: "shipping", label: "ƒêang giao" },
    { value: "completed", label: "Ho√†n th√†nh" },
    { value: "canceled", label: "ƒê√£ h·ªßy" },
  ]
    .filter((option) => {
      const orderFlow = ["pending", "paid", "shipping", "completed", "canceled"];
      const currentIndex = orderFlow.indexOf(order.status);
      const optionIndex = orderFlow.indexOf(option.value);
      return optionIndex >= currentIndex;
    })
    .map((option) => (
      <option key={option.value} value={option.value}>
        {option.label}
      </option>
    ))}
</select>
        </div>

        {/* üõç Danh s√°ch s·∫£n ph·∫©m */}
        <div className="form-section">
          <h3>S·∫£n ph·∫©m trong ƒë∆°n</h3>
          <table className="order-items-table">
            <thead>
              <tr>
                <th>T√™n s·∫£n ph·∫©m</th>
                <th>S·ªë l∆∞·ª£ng</th>
                <th>Gi√°</th>
                <th>Gi·∫£m gi√°</th>
                <th>T·∫°m t√≠nh</th>
              </tr>
            </thead>
            <tbody>
              {order.items.map((item, idx) => (
                <tr key={idx}>
                  <td>{item.product_name}</td>
                  <td>
                    <input
                      type="number"
                      value={item.quantity}
                      onChange={(e) =>
                        handleItemChange(idx, "quantity", e.target.value)
                      }
                    />
                  </td>
                  <td>
                    <input
                      type="number"
                      value={item.price}
                      onChange={(e) =>
                        handleItemChange(idx, "price", e.target.value)
                      }
                    />
                  </td>
                  <td>
                    <input
                      type="number"
                      value={item.discount_amount}
                      onChange={(e) =>
                        handleItemChange(idx, "discount_amount", e.target.value)
                      }
                    />
                  </td>
                  <td>{Number(item.subtotal).toLocaleString()} VND</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>

        {/* üìå N√∫t c·∫≠p nh·∫≠t */}
        <div className="form-section">
          <button type="button" onClick={handleUpdate} disabled={saving}>
            {saving ? "ƒêang l∆∞u..." : "L∆∞u thay ƒë·ªïi"}
          </button>
        </div>
      </form>
    </div>
  );
};

export default OrderUpdate;
